/**
 * 
 */
package unittests;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import elements.*;
import geometries.Plane;
import geometries.Plane2;
import geometries.Sphere;
import geometries.Triangle;
import primitives.*;
import org.junit.Test;
import static geometries.BoundaryBox.*;
/**
 * @author ארי
 *
 */
public class CameraTest {

	// test 1 if the v_right is correct
	@Test
	public void cameraTest() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		assertEquals(new Vector(-1, 0, 0), c.getVright());
	}

	/**
	 * Test method for
	 * {@link elements.Camera#constructRayThroughPixel(int, int, int, int, double, double, double)}.
	 */
	@Test
	public void testConstructRayThroughPixel_3X3() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));

		// test 1 construct through pixel [0,0]
		Ray r = c.constructRayThroughPixel(3, 3, 0, 0, 1, 3, 3);
		assertEquals("test 1", r, new Ray(new Vector(1, -1, -1).normalize(), new Point3D(0, 0, 0)));

		// test 2 construct through pixel [1,0]
		Ray r1 = c.constructRayThroughPixel(3, 3, 1, 0, 1, 3, 3);
		assertEquals("test 2", r1, new Ray(new Vector(0, -1, -1).normalize(), new Point3D(0, 0, 0)));

		// test 3 construct through pixel [0,1]
		Ray r2 = c.constructRayThroughPixel(3, 3, 0, 1, 1, 3, 3);
		assertEquals("test 3", r2, new Ray(new Vector(1, 0, -1).normalize(), new Point3D(0, 0, 0)));

		// test 4 construct through pixel [1,1]
		Ray r3 = c.constructRayThroughPixel(3, 3, 1, 1, 1, 3, 3);
		assertEquals("test 4", r3, new Ray(new Vector(0, 0, -1).normalize(), new Point3D(0, 0, 0)));

	}

	@Test
	public void testConstructRayThroughPixel_4X4() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		// test 1 construct through pixel [0,0]
		Ray r = c.constructRayThroughPixel(4, 4, 0, 0, 1, 4, 4);
		assertEquals("test 1", r, new Ray(new Vector(1.5, -1.5, -1).normalize(), new Point3D(0, 0, 0)));

		// test 2 construct through pixel [1,0]
		Ray r1 = c.constructRayThroughPixel(4, 4, 1, 0, 1, 4, 4);
		assertEquals("test 2", r1, new Ray(new Vector(0.5, -1.5, -1).normalize(), new Point3D(0, 0, 0)));

		// test 3 construct through pixel [1,1]
		Ray r2 = c.constructRayThroughPixel(4, 4, 1, 1, 1, 4, 4);
		assertEquals("test 3", r2, new Ray(new Vector(0.5, -0.5, -1).normalize(), new Point3D(0, 0, 0)));
	}

	// integration test for 3x3 view plane with a sphere (expected 2)
	@Test
	public void integrationsTest1() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Sphere s = new Sphere(1, new Point3D(0, 0, -3));
		//A list of all the rays that pass through the middle of each pixel in the view plane
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		//List of cutting points generated by the rays
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(s.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(2, intersections.size());
	}

	// integration test for 3x3 view plane with a sphere (expected 18)
	@Test
	public void integrationsTest2() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Sphere s = new Sphere(2.5, new Point3D(0, 0, -2.5));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(s.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(18, intersections.size());
	}

	// integration test for 3x3 view plane with a sphere (expected 10)
	@Test
	public void integrationsTest3() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Sphere s = new Sphere(2, new Point3D(0, 0, -2.5));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(s.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(10, intersections.size());
	}

	// integration test for 3x3 view plane with a sphere (expected 9)
	@Test
	public void integrationsTest4() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Sphere s = new Sphere(3, new Point3D(0, 0, -1));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(s.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(9, intersections.size());
	}

	// integration test for 3x3 view plane with a sphere (expected 0)
	@Test
	public void integrationsTest5() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Sphere s = new Sphere(0.5, new Point3D(0, 0, 1));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(s.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(0, intersections.size());
	}

	// integration test for 3x3 view plane with a plane (expected 9)
	@Test
	public void integrationsTest6() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Plane2 p = new Plane2(new Point3D(0, 0, -2), new Vector(c.getVto()));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(p.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(9, intersections.size());
	}

	// integration test for 3x3 view plane with a Inclined plane (expected 6)
	@Test
	public void integrationsTest7() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Plane2 p = new Plane2(new Point3D(0, 0, -3), new Vector(0, -2, -1));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(p.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(6, intersections.size());
	}

	// integration test for 3x3 view plane with a Inclined plane (expected 9)
	@Test
	public void integrationsTest8() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Plane2 p = new Plane2(new Point3D(0, 0, -2), new Vector(0, -1, -1));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(p.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(9, intersections.size());
	}

	// integration test for 3x3 view plane with a small triangle (expected 1)
	@Test
	public void integrationsTest9() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Triangle t = new Triangle(new Point3D(0, -1, -2), new Point3D(1, 1, -2), new Point3D(-1, 1, -2));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(t.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(1, intersections.size());
	}

	// integration test for 3x3 view plane with a big triangle (expected 2)
	@Test
	public void integrationsTest10() {
		Camera c = new Camera(new Point3D(0, 0, 0), new Vector(0, -1, 0), new Vector(0, 0, -1));
		Triangle t = new Triangle(new Point3D(0, -20, -2), new Point3D(1, 1, -2), new Point3D(-1, 1, -2));
		List<Ray> raysThroughPixels = new ArrayList<Ray>();
		for (int i  = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				raysThroughPixels.add(c.constructRayThroughPixel(3, 3, i, j, 1, 3, 3));
			}
		}
		List<GeoPoint> intersections = new ArrayList<GeoPoint>();
		for (int i = 0; i < raysThroughPixels.size(); i++) {
			intersections.addAll(t.findIntersections(raysThroughPixels.get(i)));
		}
		assertEquals(2, intersections.size());
	}

}
